// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProjectType {
  WEB_DEVELOPMENT
  MOBILE_APP
  E_COMMERCE
  SAAS_PLATFORM
  PORTFOLIO
  CONSULTING
  OTHER
}

enum Budget {
  UNDER_5K
  RANGE_5K_15K
  RANGE_15K_30K
  RANGE_30K_50K
  OVER_50K
}

enum Timeline {
  ASAP
  ONE_MONTH
  ONE_TO_THREE_MONTHS
  THREE_TO_SIX_MONTHS
  OVER_SIX_MONTHS
}

enum Priority {
  DESIGN
  PERFORMANCE
  FUNCTIONALITY
  SEO
  USER_EXPERIENCE
}

enum ContactPreference {
  EMAIL
  PHONE
  VIDEO_CALL
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL_SENT
  NEGOTIATING
  WON
  LOST
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}

enum Language {
  EN
  EN_GB
  ES
  ES_CL
  ES_ES
  DE
}

enum AssetType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum Role {
  ADMIN
  USER
}

model User {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(50)
  email     String   @db.VarChar(255)
  password  String   @db.VarChar(255)
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  leads    Lead[]
  sessions Session[]

  @@unique([email])
  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  ip        String   @db.VarChar(50)
  userAgent String   @db.VarChar(255)
  expiresAt DateTime
  theme     Theme    @default(SYSTEM)
  language  Language @default(EN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  leads Lead[]

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model Lead {
  id String @id @default(cuid())

  // Personal Information
  name    String @db.VarChar(50)
  email   String @db.VarChar(255)
  company String @db.VarChar(100)

  // Project Details
  projectType ProjectType
  budget      Budget
  timeline    Timeline
  priority    Priority

  // Message & Contact
  message           String            @db.Text
  contactPreference ContactPreference

  // Lead Management
  status LeadStatus @default(NEW)
  source String?    @default("contact_form")

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Optional fields for lead management
  notes        String?   @db.Text
  followUpDate DateTime?
  assignedTo   String?

  sessionId String
  session   Session @relation(fields: [sessionId], references: [id])
  user      User?   @relation(fields: [userId], references: [id])
  userId    String? @unique

  @@index([status])
  @@index([createdAt])
  @@index([email])
  @@map("leads")
}

model Project {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(100)
  cost        Float    @default(0)
  description String   @db.Text
  tech        String   @db.VarChar(255)
  impact      String?  @db.Text
  image       String   @db.VarChar(255)
  link        String?  @db.VarChar(255)
  linkText    String?  @db.VarChar(100)
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  assets      Asset[]

  @@index([isActive])
  @@index([sortOrder])
  @@map("projects")
}

model Asset {
  id          String    @id @default(cuid())
  priority    Int       @default(0)
  name        String    @db.VarChar(100)
  url         String    @db.VarChar(255)
  alt         String?   @db.VarChar(255)
  width       Int?
  height      Int?
  blurDataUrl String?   @db.VarChar(255)
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  type        AssetType @default(IMAGE)

  @@map("assets")
}
